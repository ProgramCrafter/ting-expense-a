   Compiling ting-expense-a v0.2.0 (/home/tigr/SeriousSoft/Rusty/ting-expense-a)
error[E0308]: mismatched types
  --> src/db_client_view.rs:51:13
   |
51 |         let (life_stats, month_stats, live_records) = upstream.take_init();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   -------------------- this expression has type `std::option::Option<(CachedStats, CachedStats, std::vec::Vec<Expense>)>`
   |             |
   |             expected `Option<(CachedStats, CachedStats, ...)>`, found `(_, _, _)`
   |
   = note: expected enum `std::option::Option<(CachedStats, CachedStats, std::vec::Vec<Expense>)>`
             found tuple `(_, _, _)`
help: try wrapping the pattern in `Some`
   |
51 |         let Some((life_stats, month_stats, live_records)) = upstream.take_init();
   |             +++++                                       +

error[E0004]: non-exhaustive patterns: `UpstreamMessage::InitStats { .. }` not covered
  --> src/db_client_view.rs:79:19
   |
79 |             match msg {
   |                   ^^^ pattern `UpstreamMessage::InitStats { .. }` not covered
   |
note: `UpstreamMessage` defined here
  --> src/crosstyping.rs:92:10
   |
92 | pub enum UpstreamMessage {
   |          ^^^^^^^^^^^^^^^
...
95 |     InitStats {lifetime_stats: CachedStats, recent_expenses: Vec<Expense>}
   |     --------- not covered
   = note: the matched value is of type `UpstreamMessage`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
85 ~                 },
86 +                 UpstreamMessage::InitStats { .. } => todo!()
   |

Some errors have detailed explanations: E0004, E0308.
For more information about an error, try `rustc --explain E0004`.
error: could not compile `ting-expense-a` (bin "ting-expense-a") due to 2 previous errors
