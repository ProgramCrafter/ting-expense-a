[package]
name = "ting-expense-a"
authors = ["Ender Ting <pythonhunter146@gmail.com>"]
version = "0.4.0"
edition = "2021"


# Nine build options:
# 1. wasm32-unknown-unknown +graphics_wasm
#     Compiles eframe-based WebAssembly application for browsers, connecting to the host server.
# 2. x86_64-unknown-linux-gnu +graphics_nowasm +selfhost
#     Compiles eframe-based native application for Linux target, with local DB.
# 3. x86_64-unknown-linux-gnu +graphics_nowasm
#     Compiles an app immediately erroring out, because it doesn't yet know where to connect.
# 4. x86_64-unknown-linux-gnu +graphics_nowasm +server
#     Compiles both axum-based server and an application utilizing it, for Linux target.
# 5. x86_64-unknown-linux-gnu +server
#     Compiles axum-based server for tracking expenses for Linux target.
# 6. x86_64-pc-windows-gnu +graphics_nowasm +selfhost
#     Compiles eframe-based native application for Windows target, with local DB.
# 7. x86_64-pc-windows-gnu +graphics_nowasm
#     Compiles an app immediately erroring out, because it doesn't yet know where to connect.
# 8. x86_64-pc-windows-gnu +graphics_nowasm +server
#     Compiles both axum-based server and an application utilizing it, for Windows target.
# 9. x86_64-pc-windows-gnu +server
#     Compiles axum-based server for tracking expenses for Windows target.
# android: WebView perhaps?
# ios: WebView perhaps?
#
# +server option also expects a prebuilt WASM bundle and its bindings in assets/ folder.


[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2.100"
wasm-bindgen-futures = "0.4"
web-sys = { version = "0.3.77", features = ["CloseEvent", "MessageEvent", "Request", "WebSocket"] }

[dependencies]
anyhow = "1.0.97"
axum = { version = "0.7.9", features = ["ws"], optional = true }
axum-extra = { version = "0.9.3", features = ["cookie", "cookie-signed"], optional = true }
eframe = { version = "0.31.1", features = ["default_fonts", "glow", "persistence", "wayland"], optional = true }
egui = { version = "0.31.1", optional = true }
env_logger = "0.11.8"
getrandom = "0.3.3"
futures = "0.3.31"
liquemap = "0.3.0"
postcard = { version = "1.1.1", features = ["use-std"] }
reqwest = { version = "0.12.15", features = ["cookies"], optional = true }
rusqlite = { version = "0.33.0", features = ["bundled", "time", "uuid"], optional = true }
serde = { version = "1.0.219", features = ["derive"] }
time = { version = "0.3.37", features = ["formatting", "local-offset", "serde"] }
tokio = { version = "1.44.1", features = ["sync"] }
tokio-stream = { version = "0.1.17" }
tokio-tungstenite = { version = "0.26.2", optional = true }
totp-rs = { version = "5.7.0", features = ["gen_secret", "zeroize"], optional = true }
tungstenite = { version = "0.26.2", optional = true }
uuid = { version = "1.16.0", features = ["v4", "fast-rng", "macro-diagnostics", "serde", "v7"] }
log = "0.4.27"
hex = "0.4.3"
js-sys = { version = "0.3.77", optional = true }

[features]
graphics_nowasm = ["dep:tungstenite", "dep:tokio-tungstenite", "graphics", "tokio/rt-multi-thread", "dep:reqwest"]
graphics_wasm = ["tokio/rt", "uuid/rng-getrandom", "getrandom/wasm_js", "graphics", "time/wasm-bindgen", "dep:js-sys"]
server = ["dep:axum", "dep:axum-extra", "dep:rusqlite", "tokio/rt-multi-thread", "dep:totp-rs"]
graphics = ["dep:eframe", "dep:egui"]
selfhost = ["dep:rusqlite"]
default  = []

# Remember about
# Enables parallel processing support by enabling the "rayon" feature of jpeg-decoder.
#   BUT IF SOMETHING ELSE enables jpeg-decoder itself
# parallel = ["jpeg-decoder?/rayon"]

[patch.crates-io]
egui-winit = { path = "../egui/crates/egui-winit/" }  # fix UTF-8 event translation
egui = { path = "../egui/crates/egui/" }

